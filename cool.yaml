AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import boto3

          def lambda_handler(event, context):
              client = boto3.client('ec2')
              response = client.describe_dhcp_options()

              # DHCP options
              for option in response['DhcpOptions']:
                  try:
                      client.create_tags(Resources=[option['DhcpOptionsId']], Tags=[{'Key': 'Name', 'Value': 'DO NOT CHANGE'}])
                  except Exception as e:
                      print(f"Error creating tags for DHCP option {option['DhcpOptionsId']}: {e}")

              # Route Table
              rt_response = client.describe_route_tables(Filters=[{'Name': 'association.main', 'Values': ['true']}])
              for rt in rt_response['RouteTables']:
                  try:
                      client.create_tags(Resources=[rt['RouteTableId']], Tags=[{'Key': 'Name', 'Value': 'DO NOT CHANGE'}])
                  except Exception as e:
                      print(f"Error creating tags for route table {rt['RouteTableId']}: {e}")

              # NACL
              nacl_response = client.describe_network_acls(Filters=[{'Name': 'default', 'Values': ['true']}])
              for nacl in nacl_response['NetworkAcls']:
                  try:
                      client.create_tags(Resources=[nacl['NetworkAclId']], Tags=[{'Key': 'Name', 'Value': 'DO NOT CHANGE'}])
                  except Exception as e:
                      print(f"Error creating tags for network ACL {nacl['NetworkAclId']}: {e}")

              # Security groups
              sg_response = client.describe_security_groups(Filters=[{'Name': 'group-name', 'Values': ['default']}])
              for sg in sg_response['SecurityGroups']:
                  try:
                      client.create_tags(Resources=[sg['GroupId']], Tags=[{'Key': 'Name', 'Value': 'DO NOT CHANGE'}])
                  except Exception as e:
                      print(f"Error creating tags for security group {sg['GroupId']}: {e}")
      Handler: index.lambda_handler
      Runtime: python3.8
      Role: !GetAtt MyLambdaRole.Arn
  MyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ec2-tagging-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:Describe*'
                  - 'ec2:CreateTags'
                Resource: '*'
                